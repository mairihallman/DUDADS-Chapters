# -*- coding: utf-8 -*-
"""introductory-ex

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hb1plsGWcSLf_Ssje4O2TXHU6ex6vR9B

# Introductory Example - Linear Regression with Pytorch and Lighting

This example will help you get comfortable with Pytorch by performing linear regression with a neural network.
"""

# install Lighting
!pip install lightning

# required imports
import lightning as L
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset

torch.manual_seed(0)

"""We generate a dummy dataset for the equation y = 3x + 1."""

x = torch.randn(100, 1) * 10 # sample x from a standard normal distribution multiplied by 10
y = 3 * x + 1 + torch.randn(100, 1) # compute y, add noise
dataset = TensorDataset(x, y) # initialize tensor dataset
train_loader = DataLoader(dataset, batch_size=10, shuffle=True) # initialize data loader

"""Now let's set up our model."""

# define a new class for your model
class LinearRegressionModel(L.LightningModule):
    def __init__(self):
        super().__init__()
        self.linear = nn.Linear(1, 1)

    # forward pass
    def forward(self, x):
        return self.linear(x)
    
    # training step; later examples will also include a validation set.
    def training_step(self, batch, batch_idx):
        x, y = batch
        y_pred = self(x)
        loss = nn.functional.mse_loss(y_pred, y)
        self.log('train_loss', loss)
        return loss

    # stochastic gradient descent for optimization
    def configure_optimizers(self):
        return optim.SGD(self.parameters(), lr=0.01)

"""Now the fun part - training!"""

model = LinearRegressionModel()
trainer = L.Trainer(max_epochs=100)
trainer.fit(model, train_loader)

"""Let's see how our model did."""

slope, intercept = model.linear.weight.item(), model.linear.bias.item()
print(f'Trained Model Parameters: Slope: {slope:.4f}, Intercept: {intercept:.4f}')

"""Not bad!"""